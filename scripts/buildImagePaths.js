// scripts/buildImagePaths.js
const fs = require('fs');
const path = require('path');

// Import set configuration
const { SET_PREFIX_MAP, SETS_CONFIG } = require('../js/sets.js');

// Configuration
const IMG_DIRECTORY = './img';
const OUTPUT_FILE = './js/cardsets.js';

async function buildImagePaths() {
  try {
    const imageSets = {};
    
    // Scan directories that match the set keys
    for (const [key, config] of Object.entries(SETS_CONFIG)) {
      // Skip CSS-based sets
      if (config.cssClassBased) continue;
      
      // Get the directory path for this set
      const setDir = config.path;
      if (!fs.existsSync(setDir)) {
        console.warn(`Warning: Directory ${setDir} not found for set ${key}`);
        continue;
      }
      
      // Add set to the mapping
      imageSets[key] = {
        name: config.name,
        types: {}
      };
      
      // Scan for type directories
      const typeDirs = await fs.promises.readdir(setDir, { withFileTypes: true });
      for (const typeDir of typeDirs) {
        if (typeDir.isDirectory()) {
          const typeName = typeDir.name.toLowerCase();
          const typePath = path.join(setDir, typeDir.name);
          
          // Add type to the mapping
          imageSets[key].types[typeName] = {};
          
          // Scan for image files
          const imageFiles = await fs.promises.readdir(typePath);
          for (const imageFile of imageFiles) {
            if (!imageFile.endsWith('.png')) continue;
            
            // Parse the filename to determine stage
            const stageInfo = parseFilename(imageFile, config.prefix);
            if (stageInfo && stageInfo.stage) {
              // Map the stage code to standard stage name
              let standardStage = stageInfo.stage;
              for (const [stageName, stageCode] of Object.entries(config.stageFormat)) {
                if (stageInfo.stage === stageCode) {
                  standardStage = stageName;
                  break;
                }
              }
              
              // Add to the mapping
              imageSets[key].types[typeName][standardStage] = {
                path: path.join(typePath, imageFile).replace(/\\/g, '/'),
                isReverse: stageInfo.isReverse
              };
            }
          }
        }
      }
    }
    
    // Add CSS-based sets
    for (const [key, config] of Object.entries(SETS_CONFIG)) {
      if (config.cssClassBased) {
        imageSets[key] = {
          name: config.name,
          types: {
            'water': { 'basic': {}, 'stage-1': {}, 'stage-2': {} },
            'fire': { 'basic': {}, 'stage-1': {}, 'stage-2': {} },
            'grass': { 'basic': {}, 'stage-1': {}, 'stage-2': {} },
            'electric': { 'basic': {}, 'stage-1': {}, 'stage-2': {} },
            'psychic': { 'basic': {}, 'stage-1': {}, 'stage-2': {} },
            'fighting': { 'basic': {}, 'stage-1': {}, 'stage-2': {} },
            'dark': { 'basic': {}, 'stage-1': {}, 'stage-2': {} },
            'metal': { 'basic': {}, 'stage-1': {}, 'stage-2': {} },
            'normal': { 'basic': {}, 'stage-1': {}, 'stage-2': {} }
          }
        };
      }
    }
    
    // Generate JavaScript
    const jsContent = `// Generated by buildImagePaths.js on ${new Date().toISOString()}
window.CARD_SETS = ${JSON.stringify(imageSets, null, 2)};`;
    
    fs.writeFileSync(OUTPUT_FILE, jsContent);
    console.log(`Image mapping generated successfully at ${OUTPUT_FILE}`);
  } catch (error) {
    console.error('Error building image paths:', error);
  }
}

function parseFilename(filename, prefix) {
  // Different parsing patterns based on known formats
  
  // Pattern 1: "P - Fire - S0.png" or "P- Fire - S0.png"
  const pattern1 = new RegExp(`${prefix}\\s*-\\s*(\\w+)\\s*-\\s*S(\\d)(?:\\s*-\\s*([A-Z]+))?`, 'i');
  const match1 = filename.match(pattern1);
  
  if (match1) {
    const [, type, stageNum, reverseFlag] = match1;
    return {
      type: type.toLowerCase(),
      stage: `S${stageNum}`,
      isReverse: reverseFlag === 'R'
    };
  }
  
  // Pattern 2: "SS_Basic_Fire.png"
  const pattern2 = new RegExp(`${prefix}_(Basic|Stage[_ ]?\\d)_(\\w+)`, 'i');
  const match2 = filename.match(pattern2);
  
  if (match2) {
    const [, stage, type] = match2;
    return {
      type: type.toLowerCase(),
      stage: stage,
      isReverse: filename.includes('-R') || filename.includes('_R')
    };
  }
  
  return null;
}

buildImagePaths();